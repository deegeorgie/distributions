varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope, ols.ic))
source('~/R/win-library/3.1/swirl/Courses/Regression_Models/Residuals/res_eqn.R', echo=TRUE)
all.equal(varChild, varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(fit$residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(UsingR);data(galton)
par(mfrow=c(1,2))
hist(galton$child, col="blue", breaks=100)
hist(galton$child, col="blue", breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu= ", mu))
text(63, 140, paste("MSE= ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu= ", mu))
text(63, 140, paste("MSE= ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child, col="blue", breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild, 100), seq(0, 150, length = 100), col = "red", lwd = 5)
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu= ", mu))
text(63, 140, paste("MSE= ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child, col="blue", breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild, 100), seq(0, 150, length = 100), col = "red", lwd = 5)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu= ", mu))
text(63, 140, paste("MSE= ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu= ", mu))
text(63, 140, paste("MSE= ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
install.packages("caret")
install.packages("ISPR")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
summary(fit)
2 * (fit$coefficients[2] - 2 * 0.5591)
attributes(fit)
w.c <- fit$residuals ^ 2
fit.c <- lm(mpg ~ 1, mtcars)
fit.c.res <- fit.c$residuals ^ 2
sum(fit.c.res)
sum(w.c) /sum(fit.c.res)
install.packages('caret')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
utils:::menuInstallPkgs()
q()
pml.testing <- read.csv("~/pml-testing.csv")
answers <- as.character(predict(modFit, pml.testing))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
rm(list=ls())
View(pml.training)
pml.training <- read.csv("~/pml-training.csv", header = TRUE)
pml.testing <- read.csv("~/pml-testing.csv", header = TRUE)
install.packages("MiKTeX")
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
pml.testing <- read.csv("~/pml-testing.csv")
answers <- as.character(predict(modFit, pml.testing))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
predictTe <- predict(modFit,testing)
table(predictTe, testing$classe)
set.seed(614)
library(lattice); library(ggplot2); library(caret)
pml.training <- read.csv("~/pml-training.csv")
inTrain <- createDataPartition(y=pml.training$classe, p=0.9, list=FALSE)
training <- pml.training[inTrain,]
testing <- pml.training[-inTrain,]
ptm <- proc.time()
modFit <- train(classe ~ user_name + pitch_arm + yaw_arm + roll_arm + roll_belt + pitch_belt + yaw_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z + accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x + magnet_belt_y + magnet_belt_z + gyros_arm_x + gyros_arm_y + gyros_arm_z + accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x + magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell + yaw_dumbbell, method="gbm", data=training, verbose=FALSE)
proc.time() - ptm
print(modFit)
predictTr <- predict(modFit,training)
table(predictTr, training$classe)
pml.testing <- read.csv("~/pml-testing.csv")
answers <- as.character(predict(modFit, pml.testing))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
load(url("http://bit.ly/dasi_anes_data"))
View(anes)
download.files("http://bit.ly/dasi_anes_data", destifile="~/Documents")
download.file("http://bit.ly/dasi_anes_data", destfile="~/Documents")
str(anes)
names(anes)
plot(gender_respondent ~ interest_attention, data = anes)
plot(interest_attention ~ gender_respondent, data = anes)
plot(interest_attention ~ incgroup_prepost, data = anes)
boxplot(interest_attention ~ incgroup_prepost, data = anes)
xyplot(interest_attention ~ incgroup_prepost, data = anes)
library(lattice)
xyplot(interest_attention ~ incgroup_prepost, data = anes)
trellis.device(color=TRUE)
with(anes, table(gender_respondent, incgroup_prepost))
with(anes, table(gender_respondent, interest_attention))
xyplot(gender_respondent | interest_attention, pch=c(4,1), aspect = 1, data = anes)
xyplot(anes$gender_respondent | anes$interest_attention)
densityplot(~ interest_attention | gender_respondent, groups = Pop, data = anes,)
with(anes, table(mean(gender_respondent, interest_attention)))
table(mean(gender_respondent, interest_attention))
table(mean(anes$gender_respondent, anes$interest_attention))
summary(anes)
plot(dem_edugroup ~ prevote_intsenbc, data = anes)
hist(dem_edugroup ~ prevote_intsenbc, data = anes)
?hist
with(anes, table(dem_edugroup, prevote_intsenbc))
with(anes, table(dem_edugroup, prevote_inthsbc))
edu_intentions <- table(dem_edugroup, prevote_inthsbc)
edu_intentions <- table(anes, dem_edugroup, prevote_inthsbc)
edu_intentions <- anes[,dem_edugroup, prevote_inthsbc]
?barplot
boxplot(prevote_inthsbc ~ dem_edugroup, data = anes, col = c("red", "blue"))
plot(prevote_inthsbc ~ dem_edugroup, type = "l")
plot(prevote_inthsbc ~ dem_edugroup, data = anes, type = "l")
plot(dem_edugroup ~ prevote_inthsbc, data = anes)
library()
library('swirl')
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", package <= "3.0.2")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" || country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
skip()
skip()
skip9
skip()
library(dplyr)
library(ggplot2)
new_data <- tbl_df(anes)
project <- select(new_data, caseid, incgroup_prepost, gender_respondent, dem_edugroup, prevote_inthsbc)
View(project)
sum(is.na(prevote_inthsbc))
sum(is.na(project$prevote_inthsbc))
filter(project, dem_edugroup == "Less Than High School Credential", prevote_inthsbc == "NA")
library(MASS)
?shuttle
data(shuttle)
str(shuttle)
names(shuttle)
?glm
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
data(InsectSprays)
outp <- exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
outp
outp[1]/outp[2]
?offset
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0, 0, 1 , 1, 1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1, 1, 0 , 0, 0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
library(dplyr)
library(ggplot2)
new_data <- tbl_df(anes)
project <- select(new_data, caseid, incgroup_prepost, gender_respondent, dem_edugroup, prevote_inthsbc)
View(project)
table(project)
enregistrements <- read.csv(~/enregistrements.csv)
enregistrements <- read.csv("~/enregistrements.csv")
View(enregistrements)
install.packages('RTools')
install.packages('devtools')
install.packages('shiny')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library()
library(shiny)
library(RTools)
library()
install.packages(Rtools)
install.packages("Rtools")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
q()
library()
library(lattice)
View(new_data)
library()
library(swirl)
swirl()
height <- c(147:190)
imc <- function(weight, height) {
for (i in height)
imc <- weight / height^2
}
print imc()
height <- c(147:190)
imc <- function(weight, height) {
for (i in height)
imc <- weight / height^2
}
print imc
imc <- function(weight, height) {
imc <- weight / height^2
}
print imc
imc <- function(weight, height) {
imc <- weight / height^2
}
imc <- function(weight, height) {
imc <- weight / height^2
}
imc
imc <- function(weight, height) {
imc <- weight / height^2
}
imc(78, 70)
imc <- function(weight, height) {
imc <- weight / height^2
print imc
}
imc <- function(weight, height) {
imc <- weight / height^2
}
imc <- function(weight, height) {
imc <- weight / height^2
}
imc
install.packages("Rcpp")
install.packages('Rcpp')
shiny::runApp('App-1')
install.packages('Rcpp')
shiny::runApp('App-1')
install.packages('devtools')
shiny::runApp('App-1')
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
runApp("App-1")
library(shiny)
runApp("App-1")
shiny::runApp('App-1')
runApp("App-1", display.mode = "showcase")
attach("usingR.RData")
names(hills)
View(hills)
system.file("examples", package="shiny")
runExample("09_upload") # file upload wizard
library(shiny)
runExample("09_upload")
runExample("02_text") # tables and data frames
runExample("07_widgets") # help text and submit buttons
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
accounts <- read.csv("comptes_nationaux.csv")
View(accounts)
library(slidify)
slidify("index.Rmd")
2. Write using R Markdown
Welcome to Shiny
##Welcome to Shiny
Shiny is an R package that makes it easy to build interactive web applications (apps) straight from R. This lesson will get you started building Shiny apps right away.
enregistrements <- read.csv("~/enregistrements.csv")
View(enregistrements)
enregistrements <- read.csv("~/enregistrements.csv", header = TRUE)
View(enregistrements)
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex = 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width = 100%, heigth = 600></iframe>')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
getOption("repos")
install.packages("markdown")
install.packages("markdown")
install.packages("markdown")
install.packages("devtools")
data()
phones <- WorldPhones
View(phones)
shiny::runApp('Distribution')
shiny::runApp('Distribution')
runApp()
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
runApp()
library(shiny)
runApp()
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
imc <- function (poids,taille){
39
90
??
shiny::runApp('Distribution')
shiny::runApp('Distribution')
reiblehj
9+nnd
imc()
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
setwd("~/Documents")
install.packages(c("maps", "mapproj"))
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
shiny::runApp('Distribution')
runApp("App-1")
runApp("App-1", display.mode = "showcase")
library(slidify)
author("Examining distributions interactively")
